 cmake_minimum_required (VERSION 3.10)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 23 )

project(arraytest VERSION 1.1.1)

#GCC compiler flags.
SET (CMAKE_CXX_COMPILER "g++" CACHE STRING "C++ compiler" FORCE)
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -foffload=nvptx-none -3 -fno-stack-protector -fno-math-errno -fno-trapping-math  -Wall")



#Clang compiler flags
#SET (CMAKE_CXX_COMPILER "clang++" CACHE STRING "C++ compiler" FORCE)
#SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -std=c++23 -fopenmp -fopenmp-targets=nvptx64-nvidia-cuda -Wall")


#Nvidia's nvc++ compiler. Path should be set manually.
#set (LANGUAGES "C;CXX")
#find_package(OpenACC REQUIRED)
#set (CMAKE_CXX_COMPILER "/opt/nvidia/hpc_sdk/Linux_x86_64/25.5/compilers/bin/nvc++" CACHE STRING "C++ compiler" )
#set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20  -mp=gpu -Msafeptr=all  -Minfo=all")



set(PROJECT_BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/build/)


include_directories(arraytest ${CMAKE_CURRENT_SOURCE_DIR})


add_executable(arraytest ${SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/main_omp.cpp)

#Set this to True if you want to use unified_shared_memory support
target_compile_definitions(arraytest PRIVATE Unified_Shared_Memory=False)




#link_directories(arraytest /opt/nvidia/hpc_sdk/Linux_x86_64/25.5/REDIST/compilers/lib/)





if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    message(STATUS "Configuring for GNU compiler (gcc)")
    target_link_libraries(arraytest PRIVATE rt m c stdc++ mpi)
endif()

#if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
#    message(STATUS "Configuring for Clang compiler")
#    target_link_libraries(arraytest PRIVATE rt m c stdc++ gomp mpi)
#endif()
#if(CMAKE_CXX_COMPILER_ID MATCHES "NVHPC")
#    message(STATUS "Configuring for NVIDIA compiler (nvc++)")
#    target_link_libraries(arraytest PRIVATE rt m c stdc++ mpi )
#endif()
